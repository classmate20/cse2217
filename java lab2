7.job sequencing with deadlines with greedy method

import java.io.*;
import java.util.*;
class Job_Sequencing {
public static void main(String args[]){
int i,j,t,k,r,q,profit=0;
Scanner sc = new
Scanner(System.in);System.out.print(" enter the 
number:");
int n=sc.nextInt(); int[] d=new
int[n+1];int[] p=new
int[n+1];int[] J=new int[n+1];int[]id=new int[ n+1];
d[0]=0;
J[0]=0;
p[0]=0;
for(i=0;i<=n;i++)
J[0] =0;
J[1]=1; 
System.out.println("enter the deadlines:");
for(i=1;i<n+1;i++){
d[i]=sc.nextInt(); 
id[i]=i;
}
System.out.println("Enter the profits:");
for(i= 1;i<n+1;i++){
p[i]=sc.nextInt();
}
for(i=1;i<n+1;i++){
for(j=1;j<n-i;j++){
if(p[j]<p[j+1]){
t=d[j];d[j]=
d[j+1];d[j+1]=t;
t=p[j];p[j]=p[j+1];
p[j+ 1]=t;
t = id[j];
id[j]=id[j+1];
id[j+1]=t;
}
}
}
for(i=0;i<n+1;i++){
System.out.print(" "+d[i]+" ");
}
System.out.println();
for(i=0;i<n+1;i++){
System.out.print(" "+p[i]+" ");
}
System.out.println();
k= 1;
profit+=p[1];
for(i=2; i<=n;i++){
r=k; 
while((d[J[r]]>d[i]) && (d[J[r]]!=r)){
r=r-1;
}
if((d[J[r]]<=d[i])&&(d[i]>r)){
for(q=k;q>=r+1;q--){
J[q+1]=J[q];
}
J[r+1]=i;
k++;
profit+=p[i];
}
}
System.out.println();
for(i=0;i<=n;i++){
if(J[i]!=0){
System.out.print("j "+id[J[i]]+" ");
}
}
System.out.println(profit);
}
}

8.single source shortest path prblm using greedy method

import java.io.*;
import java.util.*;
class Shortest_Path {
public static void main(String args[]){
int n,v,u,i,j;
int min;
Scanner sc = new Scanner(System.in); 
System.out.println("Enter the value of n :"); 
n=sc.nextInt();
int[][]cost=new int[n][n];
int dist[] = new int[n+1];
int prev[] =new int[n];
boolean visited[] = new boolean[n]; 
System.out.println("Enter the adjacency matrix:"); 
for(i=0;i<n;i++){
for(j=0;j<n;j++){ 
cost[i][j]=sc.nextInt();
if(cost[i][j]==0) 
cost[i][j]=Integer.MAX_VALUE;
}
}
System.out.println("Enter v : "); 
v = sc.nextInt();
for(i=0;i<n;i++){ 
visited[i] =false;
dist[i]=cost[v][i]; 
prev[i]=-1;
}
visited[v]=true; dist[v]=0;
dist[n]=Integer.MAX_VALUE; 
for(i=0;i<n-1;i++){
min = n;
for(j=0;j<n;j++)
{
if(visited[j]==false){ 
if(dist[j]<=dist[min])
{
min=j;
}
}
}
visited[min]=true; 
for(u=0;u<n;u++)
{
if(visited[u]==false){
if(dist[min]!=Integer.MAX_VALUE &&
cost[min][u]!= Integer.MAX_VALUE &&
dist[u]>dist[min]+cost[min][u]){
dist[u]=dist[min]+cost[min][u];
prev[u]=min;
}
}
}
}
for(i=0;i<n;i++){ 
System.out.println("Distance from source to "+ i
+" : "+dist[i]);
List<Integer>path=new ArrayList<>();
int cur=i;while(cur!=-1){
path.add(0,cur); 
cur=prev[cur];
}
path.add(0,v); 
System.out.println("shortest path from vertex "+
v + " to "+ i +" is : "+ path);
} 
}
}

3.0/1 Knapsack prblm by using dynamic prgming

import java.util.*;
class Knapsack
{
public static void main (String[] args) {
Scanner sc=new Scanner(System.in);
System.out.println("\nEnter no. of instances");
int n=sc.nextInt();
int[] p=new int[n+1];
int[]wt=new int[n+1];
int[]x=new int[n+1];
System.out.println("enter capacity");
int m =sc.nextInt();
int i,w,j;
p[0]=0;
wt[0]=0;
System.out.println("Enter profits");for(i=1;i<=n;i++){
p[i]=sc.nextInt();
}
System.out.println("Enter weights");for(i=1;i<=n;i++){
wt[i]=sc.nextInt();
}
int[][]k=new int[n+1][m+1];
for(i=0;i<=n;i++){
for(w=0;w<=m;w++){
if(i==0||w==0){
k[i][w]=0;
}
else if(wt[i]<=w){
if(p[i]+k[i-1][w-wt[i]]>=k[i-1][w]){
k[i][w]=p[i]+k[i-1][w-wt[i]];
}
else{
k[i][w]=k[i-1][w]; 
}
}
else{
k[i][w]=k[i-1][w];
}
} 
}
System.out.println("Maxprofit:"+k[n][m]);
i=n;
j=m;
while(i>0 && j>0)
{
if(k[i][j]==k[i-1][j]){
x[i]=0;i--;
}
else{
x[i]=1;
j=j-wt[i];
i--;
}
}
for(i=1;i<=n;i++){
System.out.print(x[i]+"");
}
}
}

1.n-queens prblm

import java.util.*;
public class NQueenProblem
{
Scanner sc=new Scanner(System.in);
int N=sc.nextInt();
void printSol(int board[][])
{
for(int i=0; i<N; i++)
{
for(int j=0; j<N; j++)
{
if(board[i][j]==1)
System.out.print(" "+'Q'+" ");
else System.out.print(" "+'-'+" ");
}
System.out.println();
}
}
boolean isSafe(int board[][],int row,int col)
{
int i,j;
for(i=0;i<col;i++)
{
if(board[row][i]==1)
{
return false;
}
}
for(i=row,j=col;i>=0 && j>=0;i--,j--){
if(board[i][j]==1) return false;
}
for(i=row,j=col;i<N && j>=0;i++,j--)
{
if(board[i][j]==1) return false;
}
return true;
}
boolean solveNQUtil(int board[][],int col)
{
if(col>=N) return true;
for(int i=0;i<N;i++)
{
if(isSafe(board,i,col))
{
board[i][col]=1;
if(solveNQUtil(board,col+1)==true) 
 return true;
board[i][col]=0;
}
}
return false;
}
boolean solveNQ()
{
int board[][] = new int[N][N];
for(int i=0; i<N; i++)
{
for(int j=0;j<N;j++)
{
board[i][j]=0;
}
}
if(solveNQUtil(board,0)==false)
{
System.out.println("No solution");
return false;
}
printSol(board);
return true;
}
public static void main(String args[])
{
NQueenProblem Queen=new NQueenProblem();
Queen.solveNQ();
}
}

2.optimal binary search tree

import java.util.*;
class Optimal_BST
{
static int size=0;
public static int findoptimal(int key[],int freq[],int i,int
j,int level)
{
if(j<i)
{
return 0;
}
int optimalcost=Integer.MAX_VALUE;
for(int k=i;k<=j;k++)
{
int leftoptimalcost=findoptimal(key,freq,i,k-1,level+1);
int rightoptimalcost=findoptimal(key,freq,k+1,j,level+1);
int cost=freq[k]*level+leftoptimalcost+rightoptimalcost;
optimalcost=Integer.min(optimalcost,cost);
}
return optimalcost;
}
public static void main(String args[])
{
Scanner s=new Scanner(System.in);
System.out.println("enter size of the binary serach tree");
size=s.nextInt();
int freq[]=new int[size];
int key[]=new int[size];
System.out.println("enter keys binary search tree");
for(int i=0;i<size;i++)
{
key[i]=s.nextInt();
}
System.out.println("enter frequencies of binary search 
tree");
for(int i=0;i<size;i++)
{
freq[i]=s.nextInt();
}
System.out.println("the keys are");
for(int i=0;i<size;i++)
{
System.out.println(key[i]+" ");
}
System.out.println("the frequencies are");
for(int i=0;i<size;i++)
{
System.out.println(freq[i]+" ");
}
System.out.println("the optimal cost of binary search tree is" 
+ findoptimal(key,freq,0,size-1,1));
}
}