1.abstraction

import java.util.*;
abstract class Car
{
abstract void accelerate(); 
} 
//concrete class
class Suzuki extends Car
{
void accelerate()
{
System.out.println("Suzuki::accelerate");
}
}
class abstraction
{
public static void main(String args[])
{ 
Car obj = new Suzuki(); //Car object =>contents of 
Suzuki
obj.accelerate(); //call the method 
} 
}

2.inheritance

import java.util.*;
class Animal
{
void eat(){System.out.println("eating...");} 
} 
class cheetah extends Animal
{
void run(){System.out.println("running...");} 
} 
class inheritance
{
public static void main(String args[])
{ 
cheetah d=new cheetah(); 
d.run(); 
d.eat(); 
}
}

4.encapsulation

class help {
static int multiply(int a,int b){
return a*b;
}
static double multiply(double a,double b){
return a*b;
}
static int multiply(int a,int b,int c){
return a*b*c;
}
}
class polymorphism_overloading{
public static void main(String[] args){
System.out.println(help.multiply(2,4));
System.out.println(help.multiply(5.5,6.6));
System.out.println(help.multiply(5,4,6));
}
}

6.multithreading

class MultithreadingDemo extends Thread {
public void run()
{
try {
// Displaying the thread that is running
System.out.println(
"Thread " + Thread.currentThread().getId()
+ " is running");
}
catch (Exception e) {
System.out.println("Exception is caught");
}
}
}
public class Multithread {
public static void main(String[] args)
{
int n = 8;
for (int i = 0; i< n; i++) { 
MultithreadingDemo object = new MultithreadingDemo();
object.start();
}
}
}

7.String reverse

import java.io.*;
import java.util.Scanner;
class String_reverse {
public static void main (String[] args) {
String str, nstr="";
char ch;
Scanner sc = new Scanner(System.in);
str = sc.nextLine();
for (int i=0; i<str.length(); i++)
{
ch= str.charAt(i); 
nstr= ch+nstr; 
}
System.out.println("Reversed word: "+ nstr);
}
}

3.polymorphism

a.overloading
class help{
static int multiply(int a,int b){
return a*b;
}
static double multiply(double a,double b){
return a*b;
}
static int multiply(int a,int b,int c){
return a*b*c;
}
}
class polymorphism{
public static void main(String[] args){
System.out.println(help.multiply(2,4));
System.out.println(help.multiply(5.5,6.6));
System.out.println(help.multiply(5,4,6));
}
}
b.overriding
class help{
static int multiply(int a,int b){
return a*b;
}
static double multiply(double a,double b){
return a*b;
}
static int multiply(int a,int b,int c){
return a*b*c;
}
}
class polymorphism_overloading{
public static void main(String[] args){
System.out.println(help.multiply(2,4));
System.out.println(help.multiply(5.5,6.6));
System.out.println(help.multiply(5,4,6));
}
}

5.methods in java

a.static
import java.io.*;
public class static_keyword {
static int a = 40;
int b = 50;
void simpleDisplay()
{ 
System.out.println(a);
System.out.println(b);
}
static void staticDisplay()
{
System.out.println(a);
}
public static void main(String[] args)
{
static_keyword obj = new static_keyword();
obj.simpleDisplay();
staticDisplay();
}
}
b.abstarct
abstract class fg {
abstract void printInfo();
}
class employee extends fg {
void printInfo() {
String name = "aakanksha";
int age = 21;
float salary = 55552.2F;
System.out.println(name);
System.out.println(age);
System.out.println(salary);
}
}
class abstract_keyword {
public static void main(String args[]) {
fg s = new employee();
s.printInfo();
}
}
c.final
class Bike
{
final void run()
{
System.out.println ("running");
}
}
class Honda extends Bike
{
void run()
{
System.out.println ("running safely with 100kmph");
}
public static void main (String args[])
{
Honda honda = new Honda();
honda.run();
}


